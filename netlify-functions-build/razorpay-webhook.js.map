{
  "version": 3,
  "sources": ["../netlify/functions/razorpay-webhook.ts"],
  "sourcesContent": ["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport crypto from \"crypto\";\nimport { storage } from \"../../server/storage-db\";\n\nexport const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  if (event.httpMethod !== \"POST\") {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: \"Method not allowed\" }),\n    };\n  }\n\n  try {\n    const RAZORPAY_KEY_SECRET = process.env.RAZORPAY_KEY_SECRET;\n    \n    if (!RAZORPAY_KEY_SECRET) {\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ error: \"Razorpay not configured\" }),\n      };\n    }\n\n    const webhookSignature = event.headers[\"x-razorpay-signature\"];\n    const webhookBody = event.body || \"\";\n\n    if (!webhookSignature) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: \"Missing webhook signature\" }),\n      };\n    }\n\n    // Verify webhook signature\n    const expectedSignature = crypto\n      .createHmac(\"sha256\", RAZORPAY_KEY_SECRET)\n      .update(webhookBody)\n      .digest(\"hex\");\n\n    if (webhookSignature !== expectedSignature) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: \"Invalid webhook signature\" }),\n      };\n    }\n\n    // Parse the webhook payload\n    const payload = JSON.parse(webhookBody);\n    const eventType = payload.event;\n    const paymentEntity = payload.payload?.payment?.entity;\n\n    // Handle different event types\n    if (eventType === \"payment.captured\") {\n      console.log(\"Payment captured:\", paymentEntity);\n      // Update order status if needed\n    } else if (eventType === \"payment.failed\") {\n      console.log(\"Payment failed:\", paymentEntity);\n      // Handle failed payment\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ success: true }),\n    };\n  } catch (error) {\n    console.error(\"Webhook processing failed:\", error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: \"Webhook processing failed\" }),\n    };\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;AACA,OAAO,YAAY;AAGZ,IAAM,UAAmB,OAAO,OAAqB,YAA4B;AACtF,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,sBAAsB,QAAQ,IAAI;AAExC,QAAI,CAAC,qBAAqB;AACxB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,0BAA0B,CAAC;AAAA,MAC3D;AAAA,IACF;AAEA,UAAM,mBAAmB,MAAM,QAAQ,sBAAsB;AAC7D,UAAM,cAAc,MAAM,QAAQ;AAElC,QAAI,CAAC,kBAAkB;AACrB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,4BAA4B,CAAC;AAAA,MAC7D;AAAA,IACF;AAGA,UAAM,oBAAoB,OACvB,WAAW,UAAU,mBAAmB,EACxC,OAAO,WAAW,EAClB,OAAO,KAAK;AAEf,QAAI,qBAAqB,mBAAmB;AAC1C,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,4BAA4B,CAAC;AAAA,MAC7D;AAAA,IACF;AAGA,UAAM,UAAU,KAAK,MAAM,WAAW;AACtC,UAAM,YAAY,QAAQ;AAC1B,UAAM,gBAAgB,QAAQ,SAAS,SAAS;AAGhD,QAAI,cAAc,oBAAoB;AACpC,cAAQ,IAAI,qBAAqB,aAAa;AAAA,IAEhD,WAAW,cAAc,kBAAkB;AACzC,cAAQ,IAAI,mBAAmB,aAAa;AAAA,IAE9C;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,KAAK,CAAC;AAAA,IACxC;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,4BAA4B,CAAC;AAAA,IAC7D;AAAA,EACF;AACF;",
  "names": []
}
